<!DOCTYPE html>
<html>
  <body>
    <!-- 1. The <iframe> (and video player) will replace this <div> tag. -->
    <div id="player"></div>
    
<div id="controls">

    <ul>

        <li>

            <h2>Player Initialization</h2>

            
        </li>

        <li>

            <h2>Duration</h2>
            <p><span id="current-time">0:00</span> / <span id="duration">0:00</span></p>
        </li>

        <li>

            <h2>Progress Bar</h2>
            <input type="range" id="progress-bar" value="0">

        </li>

        <li>

            <h2>Play</h2>
            <i id="play" class="material-icons">play_arrow</i>


        </li>

        <li>

            <h2>Pause</h2>
            <i id="pause" class="material-icons">pause</i>

        </li>

        <li>

            <h2>Mute / Unmute</h2>
            <i id="mute-toggle" class="material-icons">volume_up</i>

        </li>

        <li>

            <h2>Set volume</h2>
            <input id="volume-input" type="number" max="100" min="0">

        </li>

        <li>

            <h2>Speed</h2>
            <select id="speed">
                <option>0.25</option>
                <option>0.5</option>
                <option selected="selected">1</option>
                <option>1.5</option>
            <option>2</option>
            </select>


        </li>

        <li>

            <h2>Quality</h2>
            <select id="quality">
                <option>small</option>
                <option>medium</option>
                <option selected="selected">large</option>
                <option>hd720</option>
                <option>hd1080</option>
            <option>highres</option>
            </select>


        </li>

        <li>

            <h2>Playlist Next</h2>
            <i id="next" class="material-icons">fast_forward</i>

        </li>

        <li>

            <h2>Playlist Previous</h2>
            <i id="prev" class="material-icons">fast_rewind</i>

        </li>

        <li>

            <h2>Dynamically Queue Video</h2>
            <img class="thumbnail" src="./MA_demo_files/cat_video_1.jpg" data-video-id="h14wr4pXZFk">
            <img class="thumbnail" src="./MA_demo_files/cat_video_2.jpg" data-video-id="KkFnm-7jzOA">
            <img class="thumbnail" src="./MA_demo_files/cat_video_3.jpg" data-video-id="Ph77yOQFihc">


        </li>

    </ul>

</div>    
    
    

    <script>
    // 2. This code loads the IFrame Player API code asynchronously.
    var tag = document.createElement('script');

    tag.src = "https://www.youtube.com/iframe_api";
    var firstScriptTag = document.getElementsByTagName('script')[0];
    firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);

    // 3. This function creates an <iframe> (and YouTube player)
    //    after the API code downloads.
    var player;
    
    function onYouTubeIframeAPIReady() {
        player = new YT.Player('player', {
          height: '390',
          width: '640',
          videoId: 'M7lc1UVf-VE',
	       playerVars: {
		       color: 'white',
		       playlist: 'taJ60kskkns,FG0fTKAqZ5g'
		   },
          events: {
            'onReady': onPlayerReady,
            'onStateChange': onPlayerStateChange
          }
        });
      }

      // 4. The API will call this function when the video player is ready.
      function onPlayerReady(event) {
        event.target.playVideo();
        initialize()
      }
      

      // 5. The API calls this function when the player's state changes.
      //    The function indicates that when playing a video (state=1),
      //    the player should play for six seconds and then stop.
      var done = false;
      function onPlayerStateChange(event) {
        if (event.data == YT.PlayerState.PLAYING && !done) {
          setTimeout(stopVideo, 6000);
          done = true;
        }
      }
      function stopVideo() {
        player.stopVideo();
      }   
      

      
      function initialize(){

          // Update the controls on load
          updateTimerDisplay();
          updateProgressBar();

          // Clear any old interval.
          clearInterval(time_update_interval);

          // Start interval to update elapsed time display and
          // the elapsed part of the progress bar every second.
          time_update_interval = setInterval(function () {
              updateTimerDisplay();
              updateProgressBar();
          }, 1000)

      }

  // This function is called by initialize()
  function updateTimerDisplay(){
      // Update current time text display.
      $('#current-time').text(formatTime( player.getCurrentTime() ));
      $('#duration').text(formatTime( player.getDuration() ));
  }

  function formatTime(time){
      time = Math.round(time);

      var minutes = Math.floor(time / 60),
      seconds = time - minutes * 60;

      seconds = seconds < 10 ? '0' + seconds : seconds;

      return minutes + ":" + seconds;
  }
  
//This function is called by initialize()
  function updateProgressBar(){
      // Update the value of our progress bar accordingly.
      $('#progress-bar').val((player.getCurrentTime() / player.getDuration()) * 100);
  }


      
      
    </script>
    
    <script src="MA_demo_files/jquery.min.js"></script> 


<script>


$(document).ready(function(){
	




//     var player;

//     function onYouTubeIframeAPIReady() {
//         player = new YT.Player('video-placeholder', {
//             width: 600,
//             height: 400,
//             videoId: 'Xa0Q0J5tOP0',
//             playerVars: {
//                 color: 'white',
//                 playlist: 'taJ60kskkns,FG0fTKAqZ5g'
//             },
//             events: {
//                 onReady: initialize
//             }
//         });
//     }

  


$('#progress-bar').on('mouseup touchend', function (e) {

    // Calculate the new time for the video.
    // new time in seconds = total duration in seconds * ( value of range input / 100 )
    var newTime = player.getDuration() * (e.target.value / 100);

    // Skip video to new time.
    player.seekTo(newTime);

});


$('#play').on('click', function () {
    player.playVideo();
});

$('#pause').on('click', function () {
    player.pauseVideo();
});

$('#speed').on('change', function () {
    player.setPlaybackRate($(this).val());
});

$('#quality').on('change', function () {
    player.setPlaybackQuality($(this).val());
});

$('#next').on('click', function () {
    player.nextVideo()
});

$('#prev').on('click', function () {
    player.previousVideo()
});

})
</script>
    
    
  </body>
</html>